//1：清除定时器，为了保证运动过程中只有一个定时器在运行
//2：开启定时器
//3：开始运动（同时在运动中加入判断，以便在需要的时候或者满足某个需求的时候停止）

//简单运动的封装：
function startMove(obj){
	clearInterval(timer);
	var timer = setInterval(function(){
		if(obj.offsetLeft>=500){
			clearInterval(timer);
		}else{
			obj.style.left = obj.offsetLeft + 10 +'px';
		}
	},30);
}


function startMove(obj,iTarget,iSpeed){
	clearInterval(timer);
	var timer = setInterval(function(){
		if(obj.offsetLeft==iTarget){
			clearInterval(timer);
		}else{
			obj.style.left = obj.offsetLeft + iSpeed +'px';
		}
	},30);
}

//透明度
//小数精度的问题
//alert(0.2+0.7) //0.89999999999
//alert(0.1+0.3)//0.40000000000000

//近似值：可能比正确的要小也可能要大
//近似值 进行四舍五入以后可以得到正确值   Math.round
function startMove1(obj,iTarget,iSpeed){
	clearInterval(timer);
	var iCur = 0;
	var timer = setInterval(function(){
		iCur = Math.round(getStyle(obj,'opacity') * 100); //
		if(iCur==iTarget){  //对于透明度用什么做判断
			clearInterval(timer);
		}else{
			//obj.style.left = obj.offsetLeft + iSpeed +'px';
			obj.style.opacity = (iCur + iSpeed)/100;
			obj.style.filter = 'alpha(opaicty = '+ (iCur+iSpeed) +')';
		}
	},30);
}

function getStyle(obj,attr){
	if(obj.currentStyle){ //ie currentStyle 自定义属性的值
		return obj.currentStyle[attr]
	}else{
		return getComputedStyle(obj,false)[attr];
	}
}

getStyle(oImg,'opacity')
alert(oImg.currentStyle['miaov'])




//多物体运动
var timer = null;
function startMove1(obj,attr,iTarget,iSpeed){
	clearInterval(obj.timer);
	var iCur = 0;
	obj.timer = setInterval(function(){
		if(attr == 'opacity'){
			iCur = Math.round(getStyle(obj,'opacity') * 100); 
		}else{
			iCur = parseInt(getStyle(obj,attr));
		}
		
		if(iCur==iTarget){ 
			clearInterval(obj.timer);
		}else{
			if(attr == 'opacity'){
				obj.style.opacity = (iCur + iSpeed)/100;
				obj.style.filter = 'alpha(opaicty = '+ (iCur+iSpeed) +')';
			}else{
				obj.style[attr] = iCur + iSpeed + 'px';
			}
		}
	},30);
}

//多物体同时运动

function startMove1(obj,json,iSpeed){
	clearInterval(obj.timer);
	var iCur = 0;
	obj.timer = setInterval(function(){
		//定时器每走一下就要把运动的属性推进一下
		for( var attr in json){
			
			var iTarget = json[attr];
			 
			if(attr == 'opacity'){
				iCur = Math.round(getStyle(obj,'opacity') * 100); 
			}else{
				iCur = parseInt(getStyle(obj,attr));
			}
			
			if(iCur == iTarget){ 
				clearInterval(obj.timer);
			}else{
				if(attr == 'opacity'){
					obj.style.opacity = (iCur + iSpeed)/100;
					obj.style.filter = 'alpha(opaicty = '+ (iCur+iSpeed) +')';
				}else{
					obj.style[attr] = iCur + iSpeed + 'px';
				}
			}
			
		}

	},30);
}

startMove(this,{
	width : 200,
	height:200
},10);


//bug的时候 运动的距离不一样的时候

function startMove1(obj,json,iSpeed){
	clearInterval(obj.timer);
	var iCur = 0;
	obj.timer = setInterval(function(){
	
		var onOff = true;
		
		for( var attr in json){
			//什么时候停止定时器-->就是所有运动都到达了目标点的时候
			var iTarget = json[attr];
			 
			if(attr == 'opacity'){
				iCur = Math.round(getStyle(obj,'opacity') * 100); 
			}else{
				iCur = parseInt(getStyle(obj,attr));
			}
			
			if(iCur != iTarget){ 
				onOff = false; //这里说明当前值还没有运动到目标
				if(attr == 'opacity'){
					obj.style.opacity = (iCur + iSpeed)/100;
					obj.style.filter = 'alpha(opaicty = '+ (iCur+iSpeed) +')';
				}else{
					obj.style[attr] = iCur + iSpeed + 'px';
				}
			}
		}
		//在这里来看下所有的属性是不是都到了目标点
		if(onOff){
			clearInterval(obj.timer); //这里说明物体所有的属性都运动到了目标点
		}
	},30);
}


startMove(this,{
	width : 200,
	height:300
},10);



//多物体同时运动，并且需要先运动完某个属性然后再运动其他属性-->运动回调 匀速的
function startMove1(obj,json,iSpeed,fn){
	clearInterval(obj.timer);
	var iCur = 0;
	obj.timer = setInterval(function(){
	
		var onOff = true;
		
		for( var attr in json){
			//什么时候停止定时器-->就是所有运动都到达了目标点的时候
			var iTarget = json[attr];
			 
			if(attr == 'opacity'){
				iCur = Math.round(getStyle(obj,'opacity') * 100); 
			}else{
				iCur = parseInt(getStyle(obj,attr));
			}
			
			if(iCur != iTarget){ 
				onOff = false; //这里说明当前值还没有运动到目标
				if(attr == 'opacity'){
					obj.style.opacity = (iCur + iSpeed)/100;
					obj.style.filter = 'alpha(opaicty = '+ (iCur+iSpeed) +')';
				}else{
					obj.style[attr] = iCur + iSpeed + 'px';
				}
			}
		}
		//在这里来看下所有的属性是不是都到了目标点
		if(onOff){
			clearInterval(obj.timer); //这里说明物体所有的属性都运动到了目标点
			fn && fn.call(obj);//有回调函数的时候执行。反之则不执行
		}
	},30);
}

startMove(this,{width : 200},10,function(){
	startMove(this,{height:200},10)
});











//摩擦运动
//减速-->在运动的过程中，速度越来越慢
var oBtn = ;
var oDiv = ;
var timer = null;
var iSpeed = 50;
oBtn.onclick =  function(){
	clearInterval(timer);
	timer = setInterval(function(){
		//iSpeed -= 2;
		//iSpeed/=8;
		iSpeed*=0.9; //不好控制目标点
		if(oDiv.offsetLeft == 500){
			clearInterval(timer);
		}else{
			oDiv.style.left = oDiv.offsetLeft + iSpeed + 'px';
		}
	},30)
}

//缓冲运动 --这个可以运动到精确点
//越接近目标点 速度越小   速度和距离是成正比的
//速度由距离决定  速度 = （目标值-当前值）/缩放系数   bug:速度取整

var oBtn = ;
var oDiv = ;
var timer = null;

oBtn.onclick =  function(){
	clearInterval(timer);
	var iSpeed = 0;
	timer = setInterval(function(){
		iSpeed = (500-oDiv.offsetLeft)/8;
		iSpeed = iSpeed>0? Math.ceil(iSpeed) : Math.floor(iSpeed);//向上取整否则向下取整
		if(oDiv.offsetLeft == 500){
			clearInterval(timer);
		}else{
			oDiv.style.left = oDiv.offsetLeft + iSpeed + 'px';
		}
	},30)
}
//css解析 js解析  





//缓冲运动加入运动框架

function startMove(obj,json,fn){
	clearInterval(obj.timer);
	var iCur = 0;
	var iSpeed = 0;
	obj.timer = setInterval(function(){
	
		var onOff = true;
		
		for( var attr in json){
		
			var iTarget = json[attr];
			 
			if(attr == 'opacity'){
				iCur = Math.round(getStyle(obj,'opacity') * 100); 
			}else{
				iCur = parseInt(getStyle(obj,attr));
			}
			
			iSpeed = (iTarget - iCur)/8;
			iSpeed = iSpeed > 0 ? Math.ceil(iSpeed) : Math.floor(iSpeed); //速度取整
			
			if(iCur != iTarget){ 
				onOff = false; 
				if(attr == 'opacity'){
					obj.style.opacity = (iCur + iSpeed)/100;
					obj.style.filter = 'alpha(opaicty = '+ (iCur+iSpeed) +')';
				}else{
					obj.style[attr] = iCur + iSpeed + 'px';
				}
			}
		}
		if(onOff){
			clearInterval(obj.timer); 
			fn && fn.call(obj);
		}
	},30);
}

startMove(this,{width : 200},function(){
	startMove(this,{height:200})
});

startMove(this,{
	width:200,
	height:300
})



//运动框架的应用


//1:多图片的展开 收缩
<style>
*{margin:0;padding:0}
#ul1{width:330px; margin:100px auto;position:relative;}
#ul1 li { width:100px; height:100px; background:REd; float:left; margin: 10px 0 0 10px;}
</style>
<ul id="ul1">
	<li></li>
	<li></li>
	<li></li>
	<li></li>
	<li></li>
	<li></li>
	<li></li>
	<li></li>
	<li></li>
</ul>
//元素居中放大 -->改变元素的宽高外还要改变元素的定位（left,top） 如果图片放大一倍，那么位移放大的宽高的一半
//元素必须是定位的   -->通过js动态的修改
//在转换布局的时候，相对用户眼睛看的位置保持不变
//布局转换 转换之前，把当前lI到父级的距离给得到 offsetLeft/Top
window.onload = function(){
	var oUl = getId("ul1");
	var aLi = oUl.getElementsByTagName("li");
	var arr = [];
	var zIndex = 1；
	for(var i = 0;i<aLi.lenght;i++){
		//aLi[i].style.left = aLi[i].offsetLeft+'px';
		//aLi[i].style.top = aLi[i].offsetTop+'px';
		arr.push({left:aLi[i].offsetLeft,top:aLi[i].offsetTop}); //初始化存值
	}
	for(var i = 0;i<aLi.lenghth;i++){
		aLi[i].index = i;
		//在用js设置css样式的时候：在同一个代码块中，有些CSS样式的设置权限高于其他的样式
		aLi[i].style.left = arr[i].left + 'px';
		aLi[i].style.top = arr[i].top + 'px';
		aLi[i].style.position = 'absolute';
		aLi[i].style.margin = '0px';
		aLi[i].onmouseover = function(){
			this.style.background = 'green';//测试层级度
			this.style.zIndex = zIndex++;
			startMove(this,{
				width:200,
				height:200,
				left:arr[this.index].left - 50,
				top:arr[this.index].top - 50
			});
		}
		aLi[i].onmousout = function(){
			startMove(this,{
				width:100,
				height:100,
				left:arr[this.index].left,
				top:arr[this.index].top 
			});
		}
	}
}



//2:带运动效果的留言本
//先写出没有运动的效果，然后把赋值变成运动的效果
<style>
*{margin:0;padding:0;}
#ul1{position:absolute;right:10px; top:8px; width:700px; height500px; border:1px solid #000; padding:10px; overflow:hideen;}
#ul1 li{list-style:none; line-height:28px; border:1px dashed red; word-break:break-all; overflow:hideen;}
</style>
<textarea id="content" rows="10" cols="50"></textarea>
<input type="button" id="btn" value="留言">
<ul id="ul1">

</ul>

window.onload = function(){
	var oCon = document.getElementById("content");
	var oBtn = document.getElementById("btn");
	var oUl = document.getElementById("ul1");
	
	oBtn.onclick = function(){
		var oLi = document.createElement("li");
		oLi.innerHTML = oCon.value;
		if(oUl.children[0]){
			oUl.insertBefore(oLi,oUl.children[0]);
		}else{
			oUl.appendChild(oLi);
		}
		var iHeight = parseInt(getStyle(oLi,'height'));
		oLi.style.height = '0px';
		oLi.style.opacity = '0';
		oLi.style.filter = 'alpha(opacity = 0)'
		startMove(oLi,{
			height:iHeight,
			
			opacity:100
		})
	}
}





//3:淘宝幻灯片


//4:返回顶部


//5
// 图片预加载  页面刚打开的时候，加载第一张图片，然后加载完成以后，在用户看的时间段内，去加载后面的内容！那么，必须有个工具（迅雷）-->Image对象
window.onload = function(){
var oImg1 = getId("img1");
var oImg = new Image();
/*
	属性：
	src :当我们给Images对象的SRC属性赋值一个url的时候，这个Image对象就会加载url资源，加载完成
	后资源就被保存到了浏览器的缓存文件夹里，。下午如果要调用这个url地址的时候，直接是从缓存文件夹读取到的
	所以，速度很快。并且有节约资源
	onload:当资源加载完成的时候触发
	onerror:当资源加载失败的时候触发
*/
	oImg.src="";
	oImg.onload = function(){
		alert("加载完成")
	}
	document.onclick = function(){
		oImg1.src = "";
	}
	oImg.onerror = function(){
		alert("加载出错");
	}
}
<img src="" id="img1"/>

//例子：图片的预先加载-->相册
<img src="imgSrc" id="img1"/>
window.onload = function(){
	var oImg1 = getId("img1");
	var oImg = new Image();
	var arr=['imgSrc','imgSrc','imgSrc','imgSrc','imgSrc','imgSrc','imgSrc'];
	
	var iNow = 0;
	var now = 0;
	function xunlei(){
		oImg.src = arr[iNow];
		oImg.onload = function(){
			iNow++;
			if(iNow <= arr.length){
				xunlei();//递归调用
			}
			document.title = iNow+ ' / ' + arr.length;
		}
	}
	xunlei();
	oImg1.onclick = function(){
		now++;
		if(now<arr.length){
			oImg1.src = arr[now];
		}
	}
}


//6 图片的按需加载

function showImage(){
	var scrollTop = document.documentElement.scrollTop || document.body.scrollTtop;
	for(var i=0;i<aImg.length;i++){
		if(!aImg[i].isLoad && getTop(aImg[i]) < scrollTop + document.documentElement.clientHeight){
			//alert('图片进来了');
			aImg[i].src = aImg[i].getAttribute('_src');
			aImg[i].isLoad = true;
		}
	}
	function getTop(obj){
		var iTop = 0;
		while(obj){
			iTop += obj.offsetTop;
			obj = obj.offsetParent;
		}
		return iTop;
	}
}
showImage();
window.onscroll = showImage;

//存一个数组。数组里面就放需要加载的图片， 循环这个数组。每加载一个，就删除一个







//弹性运动（加减速组成）

//1:加速运动  速度累加
//2:减速运动  速度递减
//正：left 增加 右走
//负：left 减少 左走

//加速运动 
var timer = null;
var iSpeed = 0;
function  startMove(){
	clearInterval(timer);
	timer = setInterval(function(){
		iSpeed+=3; //加速
		oDiv.style.left = oDiv.offsetLeft + iSpeed +'px';
	},30);
}

//减速运动 
var timer = null;
var iSpeed = 80;
function  startMove(){
	clearInterval(timer);
	timer = setInterval(function(){
		iSpeed-=3; //减速速
		oDiv.style.left = oDiv.offsetLeft + iSpeed +'px';
	},30);
}

//左->右 加速 减速



var timer = null;
var iSpeed = 0;
function  startMove(){
	clearInterval(timer);
	timer = setInterval(function(){
		if(oDiv.offsetLeft < 500){
			iSPeed += 5;
		}else{
			iSPeed -= 5;
		}
		oDiv.style.left = oDiv.offsetLeft + iSpeed +'px';
	},30);
}




2:function  startMove(){
	clearInterval(timer);
	timer = setInterval(function(){
		if(oDiv.offsetLeft < 500){//加速度
			iSPeed += (500-oDiv.offsetLeft)/50;
		}else{
			iSPeed -= (oDiv.offsetLeft-500)/50;
		}
		oDiv.style.left = oDiv.offsetLeft + iSpeed +'px';
	},30);
}



3:function  startMove(){
	clearInterval(timer);
	timer = setInterval(function(){
		iSPeed += (500-oDiv.offsetLeft)/50;
		oDiv.style.left = oDiv.offsetLeft + iSpeed +'px';
	},30);
}

4://摩擦力 F = fM (f摩擦系数 M 质量)  速度损失  速度越来越接近于零
function  startMove(){
	clearInterval(timer);
	timer = setInterval(function(){
		iSPeed += (500-oDiv.offsetLeft)/50;
		iSpeed*=0.95; //速度越来越接近于零 速度损失
		oDiv.style.left = oDiv.offsetLeft + iSpeed +'px';
	},30);
}
 
 
5：//停止运动

function  startMove(){
	clearInterval(timer);
	timer = setInterval(function(){
		iSPeed += (500-oDiv.offsetLeft)/6;
		iSpeed*=0.75; //速度越来越接近于零 速度损失
		if(Math.abs(iSpeed)<=1 && Math.abs(500-oDiv.offsetLeft) <=1 ){ //停止条件
			alert("该停止了");
			clearInterval(timer);
			oDiv.style.left = '500px'; //修正偏差
			iSpeed = 0; //修正偏差
		}else{
			oDiv.style.left = oDiv.offsetLeft + iSpeed +'px';
		}	
		//document.title = oDiv.style.left + ',' + iSpeed;
	},30);
}



//弹性和缓冲的区别
弹性： 速度+=（目标点 - 当前值）/系数  //6 7 8
       速度*=摩擦系数  //0.7 0.75
	   
缓冲： var 速度 = （目标点 - 当前值）/系数;
		速度取整